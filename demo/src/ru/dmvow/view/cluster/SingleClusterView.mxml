<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="{WIDTH}" 
	height="{HEIGHT}"
	backgroundColor="0xFFFFFF"
	backgroundAlpha="1"
	borderColor="0x828282"
	borderStyle="solid"
	borderThickness="3"
	cornerRadius="2" 
	xmlns:cluster="ru.dmvow.view.cluster.*"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	creationComplete="onCreationComplete(event)"
	includeInLayout="false"
	>
	<mx:Metadata>
		[Event(name="minimize", type="ru.dmvow.view.cluster.ClusterEvent")]
		[Event(name="maximize", type="ru.dmvow.view.cluster.ClusterEvent")]
		[Event(name="discard", type="ru.dmvow.view.cluster.ClusterEvent")]
		[Event(name="enter", type="ru.dmvow.view.cluster.ClusterEvent")]
	</mx:Metadata>
	<mx:Style>
		.myLabel
		{
			fontSize: 12px;
			fontFamily: "Arial";
		}
	</mx:Style>
	<mx:states>
		<mx:State name="{MIN_STATE}">
			<mx:AddChild>
				<mx:Button 
					label="Maximize"
					horizontalCenter="0"
					verticalCenter="0" 
					styleName="myButton" 
					click="onMaximizeClick(event)"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="{COMMON_STATE}">
			<mx:AddChild>
				<mx:Canvas>
					<mx:Label 
						id="mainLabel" 
						truncateToFit="false"
						x="3" 
						y="0" 
						styleName="myLabel"
						text="{'Level ' + cluster.level.toString()}" fontWeight="bold"/>
					<mx:Label 
						id="subLabel" 
						truncateToFit="false"
						x="{mainLabel.x}" 
						y="{mainLabel.y + mainLabel.height - 8}" 
						styleName="myLabel"
						htmlText="{cluster.size + ' rules total'}" fontStyle="italic"/>
					<cluster:MiniHBar id="supportBar" value="{cluster.avgSupport}" color="0x437d18" x="122" y="5" width="34" height="10"/>
					<mx:Label
						x="{supportBar.x + supportBar.width}"
						y="{supportBar.y - 4}"
						truncateToFit="false"
						styleName="myLabel"
						text="{'S: ' + cluster.avgSupport.toFixed(2)}"
						color="{supportBar.color}"/>
					<cluster:MiniHBar id="confidenceBar" value="{cluster.avgConfidence}" color="0xc15e16" x="122" y="18" width="34" height="10"/>
					<mx:Label
						x="{confidenceBar.x + confidenceBar.width}"
						y="{confidenceBar.y - 4}"
						truncateToFit="false"
						styleName="myLabel"
						text="{'C: ' + cluster.avgConfidence.toFixed(2)}"
						color="{confidenceBar.color}"/>
					<mx:Label
						x="{122 + 34}"
						y="{31 - 4}"
						truncateToFit="false"
						styleName="myLabel"
						text="{'L: ' + cluster.avgLift.toFixed(2)}"
						color="0x1b2a6c"/>
						
					<mx:Text
						x="3"
						y="45"
						selectable="false"
						truncateToFit="false"
						fontStyle="italic"
						width="{WIDTH - 6}"
						text="{cluster.mostFrequentAntecedentItems.join(', ') + '\n->\n' + cluster.mostFrequentConsequentItems.join(', ')}"/>
					<mx:Button
						x="55"
						y="127"
						height="16"
						id="minimizeButton"
						label="Minimize"
						click="onMinimizeClick(event)"
						fontWeight="normal"
						paddingBottom="0"
						paddingLeft="0"
						paddingRight="0"
						paddingTop="0"
						width="70"
						/>
					<mx:Button
						x="{minimizeButton.x + minimizeButton.width + 3}"
						y="{minimizeButton.y}"
						height="16"
						id="enterButton"
						label="Enter"
						paddingBottom="0"
						paddingLeft="0"
						paddingRight="0"
						paddingTop="0"
						width="70"
						click="onEnterClick(event);"
						/>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import ru.dmvow.model.view.clustering.Cluster;
			
			public static const WIDTH:Number = 208;
			public static const HPADDING:Number = 15;
			public static const HEIGHT:Number = 152;
			public static const COMMON_STATE:String = "commonState";
			public static const MIN_STATE:String = "minState";
			public var childLink:ClusterLink;
			public var parentLink:ClusterLink;
			public var inPlace:Boolean = false;
			
			private var _cluster:Cluster;
			
			public function draw(index:Number = -1):void
			{
				if (!inPlace)
				{
					if (childLink)
					{
						var hasBadChildren:Boolean = false;
						for each (var child:SingleClusterView in childLink.childClusters)
						{
							if (!child.inPlace)
							{
								hasBadChildren = true;
								break;
							}
						}
						
						if (hasBadChildren)
							childLink.draw();
						
						y = - HEIGHT * _cluster.level - _cluster.height * ClusterView.totalHeight;
						x = ((childLink.childClusters[0] as SingleClusterView).x +
							(childLink.childClusters[childLink.childClusters.length - 1] as SingleClusterView).x)/2;   
						inPlace = true;
						
						if (!childLink.inPlace)
							childLink.draw();
						
						if (parentLink && !parentLink.inPlace)
							parentLink.draw();
					}
					else
					{
						if (index < 0)
							throw new Error("Error.");
						
						x = index * (WIDTH + HPADDING);
						y = - _cluster.height * ClusterView.totalHeight;
						inPlace = true;
					}
				}
			}
			
			public function show():void
			{
				if (visible == true)
					return;
				
				visible = true;
				
				if (childLink)
					childLink.show();
			}
			
			public function hide():void
			{
				if (visible == false)
					return;
					
				visible = false;
				
				if (childLink)
					childLink.hide();
			}
			
			[Bindable]
			public function get cluster():Cluster
			{
				return _cluster;
			}
			
			public function set cluster(value:Cluster):void
			{
				_cluster = value;
			}
			
			private function onCreationComplete(event:Event):void
			{
				currentState = COMMON_STATE;
				
				enterButton.selectedField
			}
			
			private function onMinimizeClick(event:Event):void
			{
				currentState = MIN_STATE;
				
				if (childLink)
					childLink.hide();
			}
			
			private function onMaximizeClick(event:Event):void
			{
				currentState = COMMON_STATE;
				
				if (childLink)
					childLink.show();
			}
			
			private function onEnterClick(event:Event):void
			{
				dispatchEvent(new ClusterEvent(ClusterEvent.ENTER, true));
			}
		]]>
	</mx:Script>
</mx:Canvas>
