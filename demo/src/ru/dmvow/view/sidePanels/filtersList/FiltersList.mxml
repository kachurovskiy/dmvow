<?xml version="1.0" encoding="utf-8"?>
<mx:Panel 
	title="Rule filters list"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="vertical"
	xmlns:items="ru.dmvow.model.view.processingList.items.*" 
	xmlns:control="ru.dmvow.control.*"
	creationComplete="onCreationComplete(event)"
	paddingTop="5"
	paddingRight="5"
	paddingBottom="5"
	paddingLeft="5"
	xmlns:filters="ru.dmvow.control.filters.*" 
	xmlns:filtersList="ru.dmvow.view.sidePanels.filtersList.*">
	<mx:Metadata>
		[Event(name="filtersListItemShow", type="ru.dmvow.view.sidePanels.filtersList.FiltersListItemEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import ru.dmvow.model.view.processingList.items.clusterFilter.ClusterFilterItem;
			import ru.dmvow.model.view.DMVoWModel;
			import ru.dmvow.view.sidePanels.filtersList.interestingMeasureFilter.EditInterestingMeasureFilter;
			import ru.dmvow.model.view.processingList.items.interestingMeasureFilter.InterestingMeasureFilterItem;
			import mx.events.DragEvent;
			import mx.collections.ArrayCollection;
			import ru.dmvow.view.sidePanels.filtersList.itemsFilter.EditFilterEvent;
			import mx.managers.PopUpManager;
			import ru.dmvow.model.view.processingList.items.itemsFilter.ItemsFilterItem;
			import ru.dmvow.view.sidePanels.filtersList.itemsFilter.EditItemsFilter;
			import ru.dmvow.model.DataModel;
			
			private var _model:DataModel;
			private var _dmvowModel:DMVoWModel;
			private var editItemsFilter:EditItemsFilter = new EditItemsFilter();
			private var editInterestingMeasureFilter:EditInterestingMeasureFilter = new EditInterestingMeasureFilter();
			private var editFilterIndex:Number; 
			
			[Bindable]
			public function set model(value:DataModel):void
			{
				_model = value;
			}
			
			public function get model():DataModel
			{
				return _model;
			}
			
			[Bindable]
			public function set dmvowModel(value:DMVoWModel):void
			{
				_dmvowModel = value;
			}
			
			public function get dmvowModel():DMVoWModel
			{
				return _dmvowModel;
			}
			
			private function showEditItemsFilter(item:ItemsFilterItem = null):void
			{
				editItemsFilter.newFilter = (item == null);
				if (item)
					editItemsFilter.itemsFilterItem = item;
				
				editItemsFilter.items = model.data.dataModel.modelItems;
				
				PopUpManager.addPopUp(editItemsFilter, DMVoW.instance, true);
				PopUpManager.centerPopUp(editItemsFilter);
			}
			
			private function showInterestingMeasureFilter(item:InterestingMeasureFilterItem = null):void
			{
				editInterestingMeasureFilter.newFilter = (item == null);
				if (item)
					editInterestingMeasureFilter.interestingMeasureFilterItem = item;
				
				editInterestingMeasureFilter.interestingMeasures = dmvowModel.interestingMeasures;
				
				PopUpManager.addPopUp(editInterestingMeasureFilter, DMVoW.instance, true);
				PopUpManager.centerPopUp(editInterestingMeasureFilter);
			}
			
			private function onCreationComplete(event:Event):void
			{
				list.itemRenderer = new ClassFactory(FiltersListRenderer);
				
				editItemsFilter.addEventListener(EditFilterEvent.SAVE, onEditItemsFilterSave, false, 0, true);
				editItemsFilter.addEventListener(EditFilterEvent.CANCEL, onEditItemsFilterCancel, false, 0, true);
				
				editInterestingMeasureFilter.addEventListener(EditFilterEvent.SAVE, onEditInterestingMeasureFilterSave, false, 0, true);
				editInterestingMeasureFilter.addEventListener(EditFilterEvent.CANCEL, onEditInterestingMeasureFilterCancel, false, 0, true);
				
				// Events, that are bubbled from the list items
				addEventListener(FiltersListItemEvent.REMOVE, onItemRemove, false, 0, true);
				addEventListener(FiltersListItemEvent.EDIT, onItemEdit, false, 0, true);
				addEventListener(FiltersListItemEvent.SHOW, onItemShow, false, 0, true);
			}
			
			private function onAddItemsFilter(event:Event):void
			{
				showEditItemsFilter();
			}
			
			private function onAddInterestingMeasure(event:Event):void
			{
				showInterestingMeasureFilter();
			}
			
			private function onAddClustering(event:Event):void
			{
				model.processingList.addItem(new ClusterFilterItem());
			}
			
			private function onEditItemsFilterSave(event:EditFilterEvent):void
			{
				PopUpManager.removePopUp(editItemsFilter);
				
				if (editItemsFilter.newFilter)
					model.processingList.addItem(editItemsFilter.itemsFilterItem);
			}
			
			private function onEditItemsFilterCancel(event:EditFilterEvent):void
			{
				PopUpManager.removePopUp(editItemsFilter);
				
				if (!editItemsFilter.newFilter)
					model.processingList.removeItemAt(model.processingList.length - 1);
			}

			private function onEditInterestingMeasureFilterSave(event:EditFilterEvent):void
			{
				PopUpManager.removePopUp(editInterestingMeasureFilter);
				
				if (editInterestingMeasureFilter.newFilter)
					model.processingList.addItem(editInterestingMeasureFilter.interestingMeasureFilterItem);
			}
			
			private function onEditInterestingMeasureFilterCancel(event:EditFilterEvent):void
			{
				PopUpManager.removePopUp(editInterestingMeasureFilter);
				
				if (!editInterestingMeasureFilter.newFilter)
					model.processingList.removeItemAt(model.processingList.length - 1);
			}
			
			private function onItemRemove(event:FiltersListItemEvent):void
			{
				var collection:ArrayCollection = (list.dataProvider as ArrayCollection);
				var index:Number = collection.getItemIndex(event.item);
				collection.removeItemAt(index);
				
				event.stopImmediatePropagation();
			}
			
			private function onItemEdit(event:FiltersListItemEvent):void
			{
				if (event.item is ItemsFilterItem)
					showEditItemsFilter(event.item as ItemsFilterItem);
				if (event.item is InterestingMeasureFilterItem)
					showInterestingMeasureFilter(event.item as InterestingMeasureFilterItem);
				else
					throw new Error("Unknown list item to edit.");
				
				event.stopImmediatePropagation();
			}
			
			private function onItemShow(event:FiltersListItemEvent):void
			{
				//  FiltersListController will catch this
			}
		]]>
	</mx:Script>
	<filtersList:SpecificList 
		id="list" 
		dataProvider="{model.processingList}" 
		rowHeight="32" 
		dragEnabled="true" 
		dropEnabled="true" 
		dragMoveEnabled="true"
		includeInLayout="false"
		width="{listProgress.width}"
		height="{listProgress.height}"
		enabled="{!model.processingList.working}"
		/>
	<filtersList:FiltersListProgress
		id="listProgress" 
		width="100%" 
		height="200"
		visible="{model.processingList.working}" 
		progress="{model.processingList.progress}" 
		/>
	<mx:HBox>
		<mx:Button 
			label="Content filter" 
			click="onAddItemsFilter(event)" 
			enabled="{!model.processingList.working}"/>
		<mx:Button 
			label="Interesting measure filter" 
			click="onAddInterestingMeasure(event)" 
			enabled="{!model.processingList.working}"/>
		<mx:Button 
			label="Clustering filter" 
			click="onAddClustering(event)" 
			enabled="{!model.processingList.working}"/>
	</mx:HBox>
	
	<filters:FiltersListController model="{model}" filtersList="{this}"/>
</mx:Panel>
