<?xml version="1.0" encoding="utf-8"?>
<mx:HBox
	xmlns:mx="http://www.adobe.com/2006/mxml"
	paddingBottom="5"
	paddingLeft="5"
	paddingRight="5"
	width="100%"
	height="100%"
	paddingTop="5" 
	resize="onResize(event)"
	xmlns:cluster="ru.dmvow.view.cluster.*"
	creationComplete="onCreationComplete(event)"
	>
	<mx:Panel
		id="panelCont"
		width="100%" 
		height="100%" 
		title="Cluster tree"
		paddingBottom="5"
		paddingLeft="5"
		paddingRight="5"
		paddingTop="5">
		<!--<cluster:CContainer id="cont"/>-->
		<mx:TabNavigator id="tabNavigator" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:Canvas id="controls" width="100%" height="100%" label="Graph view" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:UIComponent id="_mask" addedToStage="onMaskAddedToStage(event)"/>
				<mx:Canvas id="cont" mask="{_mask}" horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
				<mx:VBox id="controlsVBox" right="10" horizontalAlign="center">
					<mx:VSlider id="vSlider" labels="['overview', 'concrete']" showTrackHighlight="true" value="{scale}" change="scale = vSlider.value;" minimum="{MIN_SCALE}" maximum="{MAX_SCALE}"/>
					<mx:Button label="View All" click="{toStandartView();}"/>
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas label="Table view" width="100%" height="100%">
				<mx:AdvancedDataGrid id="adg" width="100%" height="100%">
					<mx:dataProvider>
						<mx:HierarchicalData source="{cluster}" childrenField="clusterChildren"/>
					</mx:dataProvider>
			        <mx:columns>
			            <mx:AdvancedDataGridColumn 
			            	dataField="clusterChildren" 
			            	labelFunction="{aDGLabelFunction}" 
			            	width="300" 
			            	sortable="false"/>
			            <mx:AdvancedDataGridColumn dataField="level" headerText="Enter?" width="50" sortable="false"/> <!-- for "Enter" button -->
			            <mx:AdvancedDataGridColumn dataField="size" width="50"/>
			            <mx:AdvancedDataGridColumn dataField="level" width="50" sortable="false"/>
			            <mx:AdvancedDataGridColumn dataField="height" width="50"/>
			            <mx:AdvancedDataGridColumn dataField="avgSupport" width="50"/>
			            <mx:AdvancedDataGridColumn dataField="avgConfidence" width="50"/>
			            <mx:AdvancedDataGridColumn dataField="avgLift" width="50"/>
			        </mx:columns>
				    <mx:rendererProviders>            
				        <mx:AdvancedDataGridRendererProvider 
				            dataField="level" 
				            renderer="ru.dmvow.view.cluster.EnterButton" 
				            columnIndex="1"/>         
				    </mx:rendererProviders>   
				</mx:AdvancedDataGrid>
			</mx:Canvas>
		</mx:TabNavigator>
	</mx:Panel>
	<mx:Script>
		<![CDATA[
			import mx.collections.HierarchicalData;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import ru.dmvow.control.filters.workers.ClusteringWorker;
			import mx.containers.Canvas;
			import mx.core.UIComponent;
			import ru.dmvow.model.view.clustering.Cluster;
			
			private static const MAX_SCALE:Number = 1;
			private static const MIN_SCALE:Number = 0.05;
			
			private static var _cluster:Cluster;
			private var singleClusterView:SingleClusterView;
			private var inited:Boolean = false;
			private var zeroLevelIndex:Number = 0;
			private var _scale:Number = 1;
			
			public static function get totalHeight():Number
			{
				return _cluster.level * SingleClusterView.HEIGHT;
			}
			
			[Bindable]
			public function get cluster():Cluster
			{
				return _cluster;
			}
			
			public function set cluster(value:Cluster):void
			{
				if (_cluster == value)
					return;
				
				if (_cluster)
				{
					while (cont.numChildren > 0)
						cont.removeChildAt(0);
					singleClusterView = null;
				}
				
				_cluster = value;
				
				if (_cluster)
				{
					if (cont)
					{
						zeroLevelIndex = 0;
						singleClusterView = addClusterTree(_cluster);
						singleClusterView.draw();
						
						toStandartView();
						
						tabNavigator.selectedIndex = 0;
					}
				}
			}
			
			private function addClusterTree(value:Cluster, parentLink:ClusterLink = null):SingleClusterView
			{
				var singleCluster:SingleClusterView = new SingleClusterView();
				singleCluster.cluster = value;
				if (parentLink)
				{
					singleCluster.parentLink = parentLink;
					parentLink.childClusters.push(singleCluster);
				}
				cont.addChild(singleCluster);
				
				if (value.clusterChildren.length > 1 && !(value.clusterChildren[0] as Cluster).simple)
				{
					var link:ClusterLink = new ClusterLink();
					singleCluster.childLink = link;
					link.parentCluster = singleCluster;
					cont.addChild(link);
					
					for (var i:Number = 0; i < value.clusterChildren.length; i++)
					{
						addClusterTree(value.clusterChildren[i] as Cluster, link);
					} 
				}
				else
				{
					singleCluster.draw(zeroLevelIndex++);
				}
				
				return singleCluster;
			}
			
			private function toStandartView():void
			{
				var contWidth:Number = zeroLevelIndex * (SingleClusterView.WIDTH + SingleClusterView.HPADDING);
				var contHeight:Number = totalHeight * 2 - 2 * SingleClusterView.HEIGHT;
				
				var viewScale:Number = Math.min((panelCont.width - 20) / contWidth, (panelCont.height - 50) / contHeight);
				if (viewScale > MAX_SCALE)
					viewScale = MAX_SCALE;
				
				if (viewScale < MIN_SCALE)
					viewScale = MIN_SCALE;
					
				cont.scaleX = 
				cont.scaleY = viewScale;
				
				scale = viewScale;
				
				cont.x = ((panelCont.width - 20) - (contWidth * viewScale))/2;
				cont.y = ((panelCont.height - 50) - (contHeight * viewScale))/2;
			}
			
			private function aDGLabelFunction(item:Object, column:AdvancedDataGridColumn):String
			{
				var cluster:Cluster = item as Cluster;
				if (cluster.rulesChildren.length > 1)
					return "Level " + cluster.level;
				else if (cluster.rulesChildren.length == 1)
				{
					var str1:String = cluster.rulesChildren[0].toString();
					var str2:String = str1.split("\n").join(" ");
					return str2;
				}
				else
					return "";
			}
			
			[Bindable]
			private function get scale():Number
			{
				return _scale;
			}
			
			private function set scale(value:Number):void
			{
				if (value > MAX_SCALE)
					value = MAX_SCALE;
				if (value < MIN_SCALE)
					value = MIN_SCALE;
				
				if (_scale == value)
					return;
				
				var mult:Number = value / _scale; 
				
				_scale = value;
				
				var pBefore:Point = new Point(cont.mouseX, cont.mouseY);
				pBefore = cont.localToGlobal(pBefore);
				pBefore = panelCont.globalToContent(pBefore);
				
				cont.scaleX = _scale;
				cont.scaleY = _scale;
				
				var pAfter:Point = new Point(cont.mouseX * mult, cont.mouseY * mult);
				pAfter = cont.localToGlobal(pAfter);
				pAfter = panelCont.globalToContent(pAfter);
				
				cont.x += pBefore.x - pAfter.x;
				cont.y += pBefore.y - pAfter.y;
				
				invalidateDisplayList();
				invalidateProperties();
				invalidateSize();
				
				validateDisplayList();
			}
			
			///////////////////////////////////////////////////////////////////////////////////
			// Ð•vent handlers
			///////////////////////////////////////////////////////////////////////////////////
			
			private function onCreationComplete(event:Event):void
			{
				inited = true;
				
				if (_cluster)
				{
					var t:Cluster = _cluster;
					_cluster = null;
					cluster = t;
				}
				
				panelCont.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown, false, 0, true);
				panelCont.addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheel, false, 0, true);
				addEventListener(ClusterEvent.ENTER, onClusterEnter, false, 0, true);
			}
			
			private function onMouseWheel(event:MouseEvent):void
			{
				if (!controlsVBox.contains(event.target as DisplayObject))
				{
					var dScale:Number = event.delta / 20;
					
					scale += dScale;
				}
			}
			
			private function onMouseDown(event:MouseEvent):void
			{
				if (!controlsVBox.contains(event.target as DisplayObject))
				{
					stage.addEventListener(MouseEvent.MOUSE_UP, onStageMouseUp, false, 0, true);
					
					cont.startDrag();
				}
			}
			
			private function onStageMouseUp(event:MouseEvent):void
			{
				stage.removeEventListener(MouseEvent.MOUSE_UP, onStageMouseUp);
				
				cont.stopDrag();
			}
			
			private function onClusterEnter(event:ClusterEvent):void
			{
				var singleClusterView:SingleClusterView = (event.target as SingleClusterView);
				var clusterEntered:Cluster;
				if (singleClusterView)
					clusterEntered = singleClusterView.cluster;
				else
					clusterEntered = event.target.data;
				ClusteringWorker.lastInstance.clusterEntered(clusterEntered);
			}
			
			private function onMaskAddedToStage(event:Event):void
			{
				onResize(null);
			}
			
			private function onResize(event:Event):void
			{
				if (_mask)
				{
					_mask.graphics.clear();
					_mask.graphics.beginFill(0xFFCC00, 1);
					_mask.graphics.drawRect(0, 0, controls.width, controls.height);
					_mask.graphics.endFill();
				}
			}
		]]>
	</mx:Script>
</mx:HBox>