<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="onCreationComplete()"
	>
	<mx:Canvas id="all" width="100%" height="100%"/>
	<mx:HBox x="190" y="10" backgroundColor="#D6D6D6" backgroundAlpha="0.3" cornerRadius="5">
		<mx:LinkButton label="Default" click="{setFormatting(DEFAULT);}"/>
		<mx:LinkButton label="Class-based" click="{setFormatting(CLASS_BASED);}"/>
		<mx:LinkButton label="Link-based" click="{setFormatting(LINK_BASED);}"/>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import ru.dmvow.model.pmml.models.associationModel.AssociationRule;
			import ru.dmvow.model.pmml.models.associationModel.Itemset;
			import ru.dmvow.model.custom.models.assotiationModel.CustomItem;
			import ru.dmvow.model.pmml.models.associationModel.AssociationModel;
			
			protected static const DEFAULT:String = "default";
			protected static const CLASS_BASED:String = "class_based";
			protected static const LINK_BASED:String = "link_based";
			
			protected var _model:AssociationModel = null;
			[Bindable]
			protected var classes:Array;
			protected var dict:Array = new Array();
			
			[Bindable]
			public function get model():AssociationModel
			{
				return _model;
			}
			
			public function set model(value:AssociationModel):void
			{
				_model = value;
				
				var temp:Array = new Array();
				var objDict:Object = new Object();
				for each (var item:CustomItem in _model.items)
				{
					objDict[item.className] = true;
				}
				for (var p:String in objDict)
				{
					temp.push(p);
				}
				classes = temp;
				
				if (all)
				{
					addObjects();
					setFormatting(DEFAULT);
				}
			}
			
			protected function addObjects():void
			{
				for (var i:Number = 0; i < _model.items.length; i++)
				{
					var temp:CustomItemView = new CustomItemView();
					temp.item = _model.items[i];
					dict.push(temp);
					
					all.addChild(temp);
				}
			}
			
			protected function setFormatting(value:String):void
			{
				var space:Number = 20;
				var cellWidth:Number = 110;
				var cellHeight:Number = 30;
				var row:Number = 0;
				var column:Number = 0;
				var colNum:Number = Math.ceil(Math.sqrt(_model.items.length));
				var i:Number;  
				var j:Number;
				if (value == DEFAULT)
				{
					for (var i:Number = 0; i < _model.items.length; i++)
					{
						/*row = Math.floor(i / colNum);
						column = i % colNum;
						
						var vis:CustomItemView = dict[i] as CustomItemView;
						vis.x = 2 * space + (space + cellWidth) * column;
						vis.y = 3 * space + (space + cellHeight) * row;*/
						var vis:CustomItemView = dict[i] as CustomItemView;
						vis.x = 100 + 400 * Math.random();
						vis.y = 100 + 300 * Math.random();
					}
				}
				
				all.graphics.clear();
				for (i = 0; i < _model.associationRules.length; i++)
				{
					drawAssociationRuleLines(_model.associationRules[i] as AssociationRule);	
				}
			}
			
			protected function drawAssociationRuleLines(rule:AssociationRule):void
			{
				var randColor:Number = Math.round(0xFFFFFF * Math.random());
				var rect1:Rectangle = drawItemsetItems(rule.antecedent.items);
				all.graphics.beginFill(randColor, 0.1);
				all.graphics.drawRoundRect(rect1.x, rect1.y, rect1.width, rect1.height, 5, 5);
				all.graphics.endFill();
				
				randColor = Math.round(0xFFFFFF * Math.random());
				var rect2:Rectangle = drawItemsetItems(rule.consequent.items);
				all.graphics.beginFill(randColor, 0.1);
				all.graphics.drawRoundRect(rect2.x, rect2.y, rect2.width, rect2.height, 5, 5);
				all.graphics.endFill();
				
				all.graphics.lineStyle(rule.support * 5, 0, rule.confidence * 0.5);
				all.graphics.moveTo(rect1.x + rect1.width/2, rect1.y + rect1.height/2);
				all.graphics.lineTo(rect2.x + rect2.width/2, rect2.y + rect2.height/2);	
			}
			
			protected function drawItemsetItems(arr:Array):Rectangle
			{
				var minX:Number = -10000;
				var minY:Number = -10000;
				var maxX:Number = -10000;
				var maxY:Number = -10000;
				for each (var item:CustomItem in arr)
				{
					for (var i:Number = 0; i < dict.length; i++)
					{
						var view:CustomItemView = (dict[i] as CustomItemView);
						if (view.item == item)
						{
							if (minX === -10000) minX = view.x;
							if (minY === -10000) minY = view.y;
							if (maxX === -10000) maxX = view.x;
							if (maxY === -10000) maxY = view.y;
							
							if (view.x < minX) minX = view.x;
							if (view.x > maxX) maxX = view.x;
							if (view.y > maxY) maxY = view.y;
							if (view.y < minY) minY = view.y;
						}
					}
				}
				
				return new Rectangle(minX - 5, minY - 5, maxX + 5, maxY + 5);
			}
			
			// event handlers
			
			protected function onCreationComplete():void
			{
				if (_model)
				{
					addObjects();
					setFormatting(DEFAULT);
				}
			}
		]]>
	</mx:Script>
</mx:Canvas>
